classdef CostsCC < robotics.ros.Message
    %CostsCC MATLAB implementation of nautonomous_mpc_msgs/CostsCC
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_mpc_msgs/CostsCC' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '8cc1defe0e2eb3a276c1063479c2a46a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        QProgress
        QLag
        QContouring
        QU
    end
    
    properties (Constant, Hidden)
        PropertyList = {'QContouring', 'QLag', 'QProgress', 'QU'} % List of non-constant message properties
        ROSPropertyList = {'q_contouring', 'q_lag', 'q_progress', 'q_u'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CostsCC(msg)
            %CostsCC Construct the message object CostsCC
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function qprogress = get.QProgress(obj)
            %get.QProgress Get the value for property QProgress
            qprogress = double(obj.JavaMessage.getQProgress);
        end
        
        function set.QProgress(obj, qprogress)
            %set.QProgress Set the value for property QProgress
            validateattributes(qprogress, {'numeric'}, {'nonempty', 'scalar'}, 'CostsCC', 'QProgress');
            
            obj.JavaMessage.setQProgress(qprogress);
        end
        
        function qlag = get.QLag(obj)
            %get.QLag Get the value for property QLag
            qlag = double(obj.JavaMessage.getQLag);
        end
        
        function set.QLag(obj, qlag)
            %set.QLag Set the value for property QLag
            validateattributes(qlag, {'numeric'}, {'nonempty', 'scalar'}, 'CostsCC', 'QLag');
            
            obj.JavaMessage.setQLag(qlag);
        end
        
        function qcontouring = get.QContouring(obj)
            %get.QContouring Get the value for property QContouring
            qcontouring = double(obj.JavaMessage.getQContouring);
        end
        
        function set.QContouring(obj, qcontouring)
            %set.QContouring Set the value for property QContouring
            validateattributes(qcontouring, {'numeric'}, {'nonempty', 'scalar'}, 'CostsCC', 'QContouring');
            
            obj.JavaMessage.setQContouring(qcontouring);
        end
        
        function qu = get.QU(obj)
            %get.QU Get the value for property QU
            qu = double(obj.JavaMessage.getQU);
        end
        
        function set.QU(obj, qu)
            %set.QU Set the value for property QU
            validateattributes(qu, {'numeric'}, {'nonempty', 'scalar'}, 'CostsCC', 'QU');
            
            obj.JavaMessage.setQU(qu);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.QProgress = obj.QProgress;
            cpObj.QLag = obj.QLag;
            cpObj.QContouring = obj.QContouring;
            cpObj.QU = obj.QU;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.QProgress = strObj.QProgress;
            obj.QLag = strObj.QLag;
            obj.QContouring = strObj.QContouring;
            obj.QU = strObj.QU;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.QProgress = obj.QProgress;
            strObj.QLag = obj.QLag;
            strObj.QContouring = obj.QContouring;
            strObj.QU = obj.QU;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.CostsCC.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.CostsCC;
            obj.reload(strObj);
        end
    end
end
