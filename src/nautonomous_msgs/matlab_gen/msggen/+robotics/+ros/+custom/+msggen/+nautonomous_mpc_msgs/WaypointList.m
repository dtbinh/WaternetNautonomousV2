classdef WaypointList < robotics.ros.Message
    %WaypointList MATLAB implementation of nautonomous_mpc_msgs/WaypointList
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_mpc_msgs/WaypointList' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '777c53ecffb511a646daab8e3c6f6444' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NautonomousMpcMsgsStageVariableClass = robotics.ros.msg.internal.MessageFactory.getClassForType('nautonomous_mpc_msgs/StageVariable') % Dispatch to MATLAB class for message type nautonomous_mpc_msgs/StageVariable
        StdMsgsFloat64Class = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Float64') % Dispatch to MATLAB class for message type std_msgs/Float64
    end
    
    properties (Dependent)
        Stages
        Uncertainty
    end
    
    properties (Access = protected)
        Cache = struct('Stages', [], 'Uncertainty', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Stages', 'Uncertainty'} % List of non-constant message properties
        ROSPropertyList = {'stages', 'Uncertainty'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = WaypointList(msg)
            %WaypointList Construct the message object WaypointList
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function stages = get.Stages(obj)
            %get.Stages Get the value for property Stages
            if isempty(obj.Cache.Stages)
                javaArray = obj.JavaMessage.getStages;
                array = obj.readJavaArray(javaArray, obj.NautonomousMpcMsgsStageVariableClass);
                obj.Cache.Stages = feval(obj.NautonomousMpcMsgsStageVariableClass, array);
            end
            stages = obj.Cache.Stages;
        end
        
        function set.Stages(obj, stages)
            %set.Stages Set the value for property Stages
            if ~isvector(stages) && isempty(stages)
                % Allow empty [] input
                stages = feval([obj.NautonomousMpcMsgsStageVariableClass '.empty'], 0, 1);
            end
            
            validateattributes(stages, {obj.NautonomousMpcMsgsStageVariableClass}, {'vector'}, 'WaypointList', 'Stages');
            
            javaArray = obj.JavaMessage.getStages;
            array = obj.writeJavaArray(stages, javaArray, obj.NautonomousMpcMsgsStageVariableClass);
            obj.JavaMessage.setStages(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Stages)
                obj.Cache.Stages = [];
                obj.Cache.Stages = obj.Stages;
            end
        end
        
        function uncertainty = get.Uncertainty(obj)
            %get.Uncertainty Get the value for property Uncertainty
            if isempty(obj.Cache.Uncertainty)
                javaArray = obj.JavaMessage.getUncertainty;
                array = obj.readJavaArray(javaArray, obj.StdMsgsFloat64Class);
                obj.Cache.Uncertainty = feval(obj.StdMsgsFloat64Class, array);
            end
            uncertainty = obj.Cache.Uncertainty;
        end
        
        function set.Uncertainty(obj, uncertainty)
            %set.Uncertainty Set the value for property Uncertainty
            if ~isvector(uncertainty) && isempty(uncertainty)
                % Allow empty [] input
                uncertainty = feval([obj.StdMsgsFloat64Class '.empty'], 0, 1);
            end
            
            validateattributes(uncertainty, {obj.StdMsgsFloat64Class}, {'vector'}, 'WaypointList', 'Uncertainty');
            
            javaArray = obj.JavaMessage.getUncertainty;
            array = obj.writeJavaArray(uncertainty, javaArray, obj.StdMsgsFloat64Class);
            obj.JavaMessage.setUncertainty(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Uncertainty)
                obj.Cache.Uncertainty = [];
                obj.Cache.Uncertainty = obj.Uncertainty;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Stages = [];
            obj.Cache.Uncertainty = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Stages = copy(obj.Stages);
            cpObj.Uncertainty = copy(obj.Uncertainty);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            StagesCell = arrayfun(@(x) feval([obj.NautonomousMpcMsgsStageVariableClass '.loadobj'], x), strObj.Stages, 'UniformOutput', false);
            obj.Stages = vertcat(StagesCell{:});
            UncertaintyCell = arrayfun(@(x) feval([obj.StdMsgsFloat64Class '.loadobj'], x), strObj.Uncertainty, 'UniformOutput', false);
            obj.Uncertainty = vertcat(UncertaintyCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Stages = arrayfun(@(x) saveobj(x), obj.Stages);
            strObj.Uncertainty = arrayfun(@(x) saveobj(x), obj.Uncertainty);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.WaypointList.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.WaypointList;
            obj.reload(strObj);
        end
    end
end
