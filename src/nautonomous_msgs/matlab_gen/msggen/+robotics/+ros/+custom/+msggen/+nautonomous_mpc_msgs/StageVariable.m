classdef StageVariable < robotics.ros.Message
    %StageVariable MATLAB implementation of nautonomous_mpc_msgs/StageVariable
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_mpc_msgs/StageVariable' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '255c63ec6152f69f18b4666c90384f0b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        TL
        TR
        X
        Y
        Theta
        U
        V
        Omega
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Omega', 'TL', 'TR', 'Theta', 'U', 'V', 'X', 'Y'} % List of non-constant message properties
        ROSPropertyList = {'omega', 'T_l', 'T_r', 'theta', 'u', 'v', 'x', 'y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = StageVariable(msg)
            %StageVariable Construct the message object StageVariable
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function tl = get.TL(obj)
            %get.TL Get the value for property TL
            tl = double(obj.JavaMessage.getTL);
        end
        
        function set.TL(obj, tl)
            %set.TL Set the value for property TL
            validateattributes(tl, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'TL');
            
            obj.JavaMessage.setTL(tl);
        end
        
        function tr = get.TR(obj)
            %get.TR Get the value for property TR
            tr = double(obj.JavaMessage.getTR);
        end
        
        function set.TR(obj, tr)
            %set.TR Set the value for property TR
            validateattributes(tr, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'TR');
            
            obj.JavaMessage.setTR(tr);
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = double(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = double(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function theta = get.Theta(obj)
            %get.Theta Get the value for property Theta
            theta = double(obj.JavaMessage.getTheta);
        end
        
        function set.Theta(obj, theta)
            %set.Theta Set the value for property Theta
            validateattributes(theta, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'Theta');
            
            obj.JavaMessage.setTheta(theta);
        end
        
        function u = get.U(obj)
            %get.U Get the value for property U
            u = double(obj.JavaMessage.getU);
        end
        
        function set.U(obj, u)
            %set.U Set the value for property U
            validateattributes(u, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'U');
            
            obj.JavaMessage.setU(u);
        end
        
        function v = get.V(obj)
            %get.V Get the value for property V
            v = double(obj.JavaMessage.getV);
        end
        
        function set.V(obj, v)
            %set.V Set the value for property V
            validateattributes(v, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'V');
            
            obj.JavaMessage.setV(v);
        end
        
        function omega = get.Omega(obj)
            %get.Omega Get the value for property Omega
            omega = double(obj.JavaMessage.getOmega);
        end
        
        function set.Omega(obj, omega)
            %set.Omega Set the value for property Omega
            validateattributes(omega, {'numeric'}, {'nonempty', 'scalar'}, 'StageVariable', 'Omega');
            
            obj.JavaMessage.setOmega(omega);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TL = obj.TL;
            cpObj.TR = obj.TR;
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Theta = obj.Theta;
            cpObj.U = obj.U;
            cpObj.V = obj.V;
            cpObj.Omega = obj.Omega;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TL = strObj.TL;
            obj.TR = strObj.TR;
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Theta = strObj.Theta;
            obj.U = strObj.U;
            obj.V = strObj.V;
            obj.Omega = strObj.Omega;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TL = obj.TL;
            strObj.TR = obj.TR;
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Theta = obj.Theta;
            strObj.U = obj.U;
            strObj.V = obj.V;
            strObj.Omega = obj.Omega;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.StageVariable.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_mpc_msgs.StageVariable;
            obj.reload(strObj);
        end
    end
end
